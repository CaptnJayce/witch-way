#### day 1
Basic movement 
Player, Berry and Rock structs
Basic collision detection
Basic camera
basic basic basic

#### day 2
Setup game state enum to manage:
    - main
    - pause 
    - game states
Added some very basic UI

#### day 3
Simple editor, able to place and destroy entities
Added a player, rock, and berry, texture. Only implemented the player texture.

#### day 4
Player_sprite will now flip when moving left/right
Lots of refactoring (thats what we like to see)

#### day 5
Implemented remaining textures and spritesheets
Began work on hotbar, started with dynamic drawing logic
Moved structs above relevant proc

#### day 6
Removed previous hotbar iterations
Implemented inventory-prototype

#### day 7 
Radial pickup for objects
Press F to pickup object
Made significant project optimisations

#### day 8
Player can now move along the axis they are not colliding with when colliding
Discovered misaligned hitbox during collision rework - fixed
Added more information to the debug menu
Added ability to save/load the player's position
Removed abhorrent abuse of pointers lamao
Moved camera into own file
Renamed some variables and procedures, decomposed object_init
Inventory background 
Item will be greyed out until quantity is over 0

#### day 9
Added a basic enemy with:
    - sprite
    - collision
    - random movement
    - setup for interaction with player
Fixed enemy not spawning at mouse xy
Fixed enemy logic in general
Kinda added contact damage

#### day 10
Added a way to return to MainMenu and quit
Implemented iframe system
Added a death screen
Inventory can no longer be toggled in the pause menu
    - Still need to make it disappear when changing game state

#### day 11
Setup an actual trello pad - may revert later 
TileGrid with mouse highlighting

#### day 12
Implemented enemy collision with objects
Refactored collision.odin
Refactored init_ calls in main.odin

#### day 13
Added entity_counter to debug menu
Debug menu can now be toggled on/off
Reworked flip_texture to accept any sprite - not just players
Enemy sprite will now flip
Refactored multiple mouse position variables into one global one

#### day 14
Added wand & fireball programmer art
Corrected error with player source using e. instead of p.
Added wand to player
You can now spawn a projectile with the wand 
Added waterbolt/sparking programmer art
Added fire rate
Made the projectile travel from the wand

#### day 15
Added hitboxes to debug menu
Fixed misaligned spell hitbox
Enemies now get removed from l.enemies in correct order
Enemy death con
Split spell code into its own file
Basic status affect logic
Moved status effect logic in status_handler

#### day 16
Re-designed enemy code because it was causing headaches
Added two new enemies w/programmer art
Implemented enemy iframes
Simplified editor calls for enemy placement
Organised code for Enemy & Spell structs
Removed pointer in hitbox call
Added piercing to spells

#### day 17
Fixed enemies not spawning at mp (again)
Fixed spell type None appending to array
Implemented some basic raygui for debug menu
Merged debug and editor

#### day 18
Very advanced super graphics to indicate status effect
Artwork for player home and ambient plants

#### day 19
Implemented code from world-grid-test, including:
    - Editable tilemaps
    - Framework for multiple levels
    - Serialising to binary
    - bit_sets for tile flags

#### day 20
Resized all textures and sprites
Fixed save() not being called
Tilemap generation is now seeded
Tilemap will now init on init load
Cleanup & implemented tile collisions
Fixed player not taking damage 
Normalize diagonal movement

TODO:
Level-based rendering to optimize larger grids of tiles

Artwork:
    - Speed plant (increases player movement speed)
    - Range plant (increases range of spells)
    - Bushes and Shrubbery
    - Player house

Status affect timer

Player status affects 
    - Some buffs some debuffs
    - If you walk into your own spell, get hit with the debuff
    - 
Draw some environmental stuff
    - Player House
    - Randomly spawn objects within a boundry
    - Randomly spawn enemies within a boundry
    
Optimisations:
    - If off-screen stop drawing
        - Enemy and projectile movement should still be calculated
    - Draw house in three different parts to organise hitboxes & z index

Will need to make a hitbox/collision editor at some point
